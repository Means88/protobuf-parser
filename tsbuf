#!/usr/bin/env node
const fs = require('fs');
const file = require('file');
const path = require('path');
const { executeMe } = require('execute-me');
const { exportSingleFile, TypeScriptExporter, logger } = require('./dist/cli/exporter');

function tsbuf(output = '.', mode = "global") {
  /**
   * protobuf-parser
   * Generate TypeScript interface with Protobuf.
   *
   * @version 0.1.0
   * @param {string} output - output path
   * @param {string} mode - "global": Global Definition, "module": Module Definition
   */
  const inputPath = arguments[arguments.length - 1][0];

  if (!inputPath) {
    logger.error('Input file is not specified.');
    process.exit(1);
  }

  const absoluteInputPath = path.resolve(inputPath);
  const ext = `${mode === 'global' ? '.d' : ''}.ts`;

  if (fs.lstatSync(absoluteInputPath).isFile()) {
    let outputPath = path.resolve(output);
    if (!outputPath.endsWith('.ts')) {
      const fileName = path.basename(absoluteInputPath, '.proto');
      outputPath = path.join(outputPath, `${fileName}${ext}`);
    }
    exportSingleFile(absoluteInputPath, outputPath, mode);
    logger.success(`Generate ${outputPath}`);
    return;
  }

  const exporter = new TypeScriptExporter();
  file.walk(absoluteInputPath, (err, dirPath, dirs, files) => {
    for (const file of files) {
      if (!file.endsWith('.proto')) {
        continue;
      }
      const absolutePath = path.resolve(output);
      exporter.handleSource(mode, file, absoluteInputPath, absolutePath, (fileName) => {
        logger.error(`Generate from ${path.relative(absoluteInputPath, fileName)}`);
        return true;
      });
    }
  });
}

executeMe(tsbuf);
